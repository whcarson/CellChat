DimPlot(LCMA01_BEVR_CD31, reduction="umap")
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
"Set ligand-receptor interaction db"
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
# use a subset of CellChatDB for cell-cell communication analysis
# CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling
# use all CellChatDB for cell-cell communication analysis
CellChatDB.use <- CellChatDB # simply use the default CellChatDB
# set the used database in the object
LCMA01_BEVR_CD31_Chat@DB <- CellChatDB.use
# subset the expression data of signaling genes for saving computation cost
LCMA01_BEVR_CD31_Chat <- subsetData(LCMA01_BEVR_CD31_Chat) # This step is necessary even if using the whole database
future::plan("multiprocess", workers = 4) # do parallel
LCMA01_BEVR_CD31_Chat <- identifyOverExpressedGenes(LCMA01_BEVR_CD31_Chat)
LCMA01_BEVR_CD31_Chat <- identifyOverExpressedInteractions(LCMA01_BEVR_CD31_Chat)
# project gene expression data onto PPI (Optional: when running it, USER should set `raw.use = FALSE` in the function `computeCommunProb()` in order to use the projected data)
# cellchat <- projectData(cellchat, PPI.human)
LCMA01_BEVR_CD31_Chat <- computeCommunProb(LCMA01_BEVR_CD31_Chat)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
LCMA01_BEVR_CD31_Chat <- filterCommunication(LCMA01_BEVR_CD31_Chat, min.cells = 10)
LCMA01_BEVR_CD31_MTX <- ReadMtx(
mtx = paste(directory_string, "matrix.mtx.gz", sep = ""),
features = paste(directory_string, "features.tsv.gz", sep = ""),
cells = paste(directory_string, "barcodes.tsv.gz", sep = ""))
rm(list = ls())
library(CellChat)
library(patchwork)
library(dplyr)
library(Seurat)
options(stringsAsFactors = FALSE)
directory_string <- paste("C:/Users/19193/OneDrive - The University of Chicago",
"/Documents/UChicago/Internships etc/",
"Internship Opportunities/Aghi Lab/CD31 sorted/",
"LCMA01_BEVR_CD31/filtered_feature_bc_matrix/",
sep = "")
LCMA01_BEVR_CD31_MTX <- ReadMtx(
mtx = paste(directory_string, "matrix.mtx.gz", sep = ""),
features = paste(directory_string, "features.tsv.gz", sep = ""),
cells = paste(directory_string, "barcodes.tsv.gz", sep = ""))
LCMA01_BEVR_CD31 <- CreateSeuratObject(counts = LCMA01_BEVR_CD31_MTX)
LCMA01_BEVR_CD31[["percent.mt"]] <- PercentageFeatureSet(LCMA01_BEVR_CD31, pattern="^MT-")
LCMA01_BEVR_CD31 <- subset(LCMA01_BEVR_CD31, subset= nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
LCMA01_BEVR_CD31 <- NormalizeData(LCMA01_BEVR_CD31, normalization.method = "LogNormalize", scale.factor = 10000)
LCMA01_BEVR_CD31 <- FindVariableFeatures(LCMA01_BEVR_CD31, selection.method = "vst", nfeatures=2000)
all.genes <- rownames(LCMA01_BEVR_CD31)
LCMA01_BEVR_CD31 <- ScaleData(LCMA01_BEVR_CD31, block.size = 1000)
LCMA01_BEVR_CD31 <- RunPCA(LCMA01_BEVR_CD31,  features=VariableFeatures(object=LCMA01_BEVR_CD31))
print(LCMA01_BEVR_CD31[["pca"]], dims=1:15, nfeatures = 15)
LCMA01_BEVR_CD31 <- FindNeighbors(LCMA01_BEVR_CD31, dims=1:10)
LCMA01_BEVR_CD31 <- FindClusters(LCMA01_BEVR_CD31, resolution=0.5)
LCMA01_BEVR_CD31 <- RunUMAP(LCMA01_BEVR_CD31, dims=1:10)
DimPlot(LCMA01_BEVR_CD31, reduction="umap")
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
"Set ligand-receptor interaction db"
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
# use a subset of CellChatDB for cell-cell communication analysis
# CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling
# use all CellChatDB for cell-cell communication analysis
CellChatDB.use <- CellChatDB # simply use the default CellChatDB
# set the used database in the object
LCMA01_BEVR_CD31_Chat@DB <- CellChatDB.use
# subset the expression data of signaling genes for saving computation cost
LCMA01_BEVR_CD31_Chat <- subsetData(LCMA01_BEVR_CD31_Chat) # This step is necessary even if using the whole database
future::plan("multiprocess", workers = 4) # do parallel
LCMA01_BEVR_CD31_Chat <- identifyOverExpressedGenes(LCMA01_BEVR_CD31_Chat)
LCMA01_BEVR_CD31_Chat <- identifyOverExpressedInteractions(LCMA01_BEVR_CD31_Chat)
# project gene expression data onto PPI (Optional: when running it, USER should set `raw.use = FALSE` in the function `computeCommunProb()` in order to use the projected data)
# cellchat <- projectData(cellchat, PPI.human)
LCMA01_BEVR_CD31_Chat <- computeCommunProb(LCMA01_BEVR_CD31_Chat)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
LCMA01_BEVR_CD31_Chat <- filterCommunication(LCMA01_BEVR_CD31_Chat, min.cells = 10)
LCMA01_BEVR_CD31_Chat_DF_LR <- subsetCommunication(LCMA01_BEVR_CD31_Chat)
LCMA01_BEVR_CD31_Chat_DF_Net <- subsetCommunication(LCMA01_BEVR_CD31_Chat)
View(LCMA01_BEVR_CD31_Chat_DF_LR)
View(LCMA01_BEVR_CD31_Chat_DF_Net)
LCMA01_BEVR_CD31_Chat_DF_LR <- subsetCommunication(LCMA01_BEVR_CD31_Chat)
LCMA01_BEVR_CD31_Chat_DF_Net <- subsetCommunication(LCMA01_BEVR_CD31_Chat, slot.name = "netP")
LCMA01_BEVR_CD31_Chat <- computeCommunProbPathway(LCMA01_BEVR_CD31_Chat)
LCMA01_BEVR_CD31_Chat <- aggregateNet(LCMA01_BEVR_CD31_Chat)
max(LCMA01_BEVR_CD31_Chat@netP$prob)
View(LCMA01_BEVR_CD31_Chat)
LCMA01_BEVR_CD31_Chat@netP[["prob"]]
#Generate interaction network
LCMA01_BEVR_CD31_Chat <- aggregateNet(LCMA01_BEVR_CD31_Chat)
#Visualize interaction network
groupSize <- as.numeric(table(LCMA01_BEVR_CD31_Chat@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(LCMA01_BEVR_CD31_Chat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(LCMA01_BEVR_CD31_Chat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
View(LCMA01_BEVR_CD31)
LCMA01_BEVR_CD31_Chat@net$prob
max(LCMA01_BEVR_CD31_Chat@net$prob)
netVisual_circle(LCMA01_BEVR_CD31_Chat@net$prob)
LCMA01_BEVR_CD31_Chat@netP$prob[,,"MHC-II"]
#Visualize MHC-II pathway interactions
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,"MHC-II"])
#Visualize MHC-II pathway interactions
crclPlotMHC <- netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,"MHC-II"])
crclPlotMHC
type(crclPlotMHC)
recordedplot
library(plotly)
#Generate Plots
plots <- c()
#Generate Plots
plots <- c()
for (pathway in LCMA01_BEVR_CD31_Chat@netP$prob[1,1,:]){
#Generate Plots
plots <- c()
for (pathway in LCMA01_BEVR_CD31_Chat@netP$prob[1,1,]){
print(pathway)
}
LCMA01_BEVR_CD31_Chat@netP$prob[1,1,]
print(pathway)
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
}
#Generate Plots
plots <- c()
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
append(plots, netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway]))
}
#Generate Plots
plots <- c()
par(mfcol=c(5,5))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
append(plots, netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway]))
}
#Generate Plots
plots <- c()
par(mfcol=c(5,5))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway])
}
#Generate Plots
plots <- c()
par(mfrow=c(5,5))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway])
}
#Generate Plots
plots <- c()
par(mfrow=c(2,2))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway])
}
par(mai=c(0.1, 0.1, 0.1, 0.1))
#Generate Plots
plots <- c()
par(mfrow=c(2,2))
par(mai=c(0.1, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway])
}
#Generate Plots
plots <- c()
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway])
}
#Generate Plots
plots <- c()
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway])
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.4, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.4, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.2, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.2))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.4))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway,remove.isolate = T)
}
#Generate Plots
par(mfrow=c(5,5))
par(mai=c(0.1, 0.1, 0.1, 0.1))
for (pathway in LCMA01_BEVR_CD31_Chat@netP$pathways){
print(pathway)
netVisual_circle(LCMA01_BEVR_CD31_Chat@netP$prob[,,pathway], title.name = pathway)
}
LCMA01_BEVR_CD31_Chat@netP$prob[,,"CADM"]
LCMA01_BEVR_CD31_Chat@netP$prob[,,"NCAM"]
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 1:13){
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.25))
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 1:13){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.25))
}
as.character(1)
letters
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 1:13){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=intToUtf8(i+64), min.pct=0.25))
}
library(dplyr)
library(Seurat)
library(patchwork)
pbmc.data <- Read10X(data.dir="filtered_gene_bc_matrices/hg19/")
pbmc <- CreateSeuratObject(counts=pbmc.data, project="pbmc3k", min.cells=3, min.features=200)
pbmc
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.25))
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1="A", min.pct=0.25))
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=1, min.pct=0.25))
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
FindMarkers(LCMA01_BEVR_CD31, ident.1=1, min.pct=0.25)
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.8))
}
?FindMarkers
LCMA01_BEVR_CD31 <- RunPCA(LCMA01_BEVR_CD31,  features=VariableFeatures(object=LCMA01_BEVR_CD31))
print(LCMA01_BEVR_CD31[["pca"]], dims=1:15, nfeatures = 15)
LCMA01_BEVR_CD31 <- FindNeighbors(LCMA01_BEVR_CD31, dims=1:10)
LCMA01_BEVR_CD31 <- FindClusters(LCMA01_BEVR_CD31, resolution=0.5)
LCMA01_BEVR_CD31 <- RunUMAP(LCMA01_BEVR_CD31, dims=1:10)
DimPlot(LCMA01_BEVR_CD31, reduction="umap")
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.8))
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
markers
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
append(markers, FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1))
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
markers
#Identify Cluster Markers
markers <- c()
for (i in 0:12){
print(i)
marker <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
print(marker)
append(markers, marker)
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
markers[1]
#Identify Cluster Markers
markers <- list()
for (i in 0:12){
marker <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
markers[[i]] <- marker
}
#Identify Cluster Markers
markers <- list()
for (i in 0:2){
marker <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
append(markers, marker)
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
markers
#Identify Cluster Markers
markers <- list()
for (i in 0:2){
marker <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
markers <- append(markers, marker)
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
markers
markers(1)
markers[1]
markers[2]
length(markers)
#Identify Cluster Markers
markers <- list()
for (i in 0:2){
marker <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
markers <- append(markers, marker)
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
length(markers)
#Identify Cluster Markers
markers <- c()
for (i in 0:2){
marker <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
markers <- append(markers, marker)
}
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
length(markers)
markers[1]
#Identify Cluster Markers
markers <- c()
for (i in 0:2){
paste0("marker", i) <- FindMarkers(LCMA01_BEVR_CD31, ident.1=i, min.pct=0.1)
markers <- append(markers, marker)
}
#Identify Cluster Markers
markers <- c()
markerA <- FindMarkers(LCMA01_BEVR_CD31, ident.1=1, min.pct=0.1)
markerB <- FindMarkers(LCMA01_BEVR_CD31, ident.1=2, min.pct=0.1)
markerC <- FindMarkers(LCMA01_BEVR_CD31, ident.1=3, min.pct=0.1)
markerD <- FindMarkers(LCMA01_BEVR_CD31, ident.1=4, min.pct=0.1)
markerE <- FindMarkers(LCMA01_BEVR_CD31, ident.1=5, min.pct=0.1)
markerF <- FindMarkers(LCMA01_BEVR_CD31, ident.1=6, min.pct=0.1)
markerG <- FindMarkers(LCMA01_BEVR_CD31, ident.1=7, min.pct=0.1)
markerH <- FindMarkers(LCMA01_BEVR_CD31, ident.1=8, min.pct=0.1)
markerI <- FindMarkers(LCMA01_BEVR_CD31, ident.1=9, min.pct=0.1)
markerJ <- FindMarkers(LCMA01_BEVR_CD31, ident.1=10, min.pct=0.1)
markerK <- FindMarkers(LCMA01_BEVR_CD31, ident.1=11, min.pct=0.1)
markerL <- FindMarkers(LCMA01_BEVR_CD31, ident.1=12, min.pct=0.1)
markerM <- FindMarkers(LCMA01_BEVR_CD31, ident.1=13, min.pct=0.1)
#Identify Cluster Markers
markerA <- FindMarkers(LCMA01_BEVR_CD31, ident.1=0, min.pct=0.1)
markerB <- FindMarkers(LCMA01_BEVR_CD31, ident.1=1, min.pct=0.1)
markerC <- FindMarkers(LCMA01_BEVR_CD31, ident.1=2, min.pct=0.1)
markerD <- FindMarkers(LCMA01_BEVR_CD31, ident.1=3, min.pct=0.1)
markerE <- FindMarkers(LCMA01_BEVR_CD31, ident.1=4, min.pct=0.1)
markerF <- FindMarkers(LCMA01_BEVR_CD31, ident.1=5, min.pct=0.1)
markerG <- FindMarkers(LCMA01_BEVR_CD31, ident.1=6, min.pct=0.1)
markerH <- FindMarkers(LCMA01_BEVR_CD31, ident.1=7, min.pct=0.1)
markerI <- FindMarkers(LCMA01_BEVR_CD31, ident.1=8, min.pct=0.1)
markerJ <- FindMarkers(LCMA01_BEVR_CD31, ident.1=9, min.pct=0.1)
markerK <- FindMarkers(LCMA01_BEVR_CD31, ident.1=10, min.pct=0.1)
markerL <- FindMarkers(LCMA01_BEVR_CD31, ident.1=11, min.pct=0.1)
markerM <- FindMarkers(LCMA01_BEVR_CD31, ident.1=12, min.pct=0.1)
#Assign New Cluster Names
levels(LCMA01_BEVR_CD31$seurat_clusters) <- c(
"A", "B", "C", "D", "E", "F", "G",
"H", "I", "J", "K", "L", "M")
#Make Cell Chat Object
LCMA01_BEVR_CD31_Chat <- createCellChat(object = LCMA01_BEVR_CD31, group.by="seurat_clusters")
markerA
View(markerA)
View(markerB)
View(LCMA01_BEVR_CD31)
LCMA01_BEVR_CD31@meta.data[["seurat_clusters"]]
count(LCMA01_BEVR_CD31@meta.data[["seurat_clusters"]])
table(LCMA01_BEVR_CD31@meta.data[["seurat_clusters"]])
View(markerM)
